"use strict";(self.webpackChunkosmosis_docs=self.webpackChunkosmosis_docs||[]).push([[3431],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(n),g=r,c=m["".concat(l,".").concat(g)]||m[g]||p[g]||i;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={},o="Incentives",s={unversionedId:"modules/incentives/README",id:"modules/incentives/README",title:"Incentives",description:"Abstract",source:"@site/docs/osmosis-core/modules/incentives/README.md",sourceDirName:"modules/incentives",slug:"/modules/incentives/",permalink:"/osmosis-core/modules/incentives/",draft:!1,editUrl:"https://github.com/osmosis-labs/docs/tree/main/docs/osmosis-core/modules/incentives/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IBC Rate Limit",permalink:"/osmosis-core/modules/ibc-rate-limit/"},next:{title:"Lockup",permalink:"/osmosis-core/modules/lockup/"}},l={},u=[{value:"Abstract",id:"abstract",level:2},{value:"Contents",id:"contents",level:2},{value:"Concepts",id:"concepts",level:2},{value:"State",id:"state",level:2},{value:"Incentives management",id:"incentives-management",level:3},{value:"Gauge",id:"gauge",level:3},{value:"Gauge queues",id:"gauge-queues",level:3},{value:"Upcoming queue",id:"upcoming-queue",level:4},{value:"Active queue",id:"active-queue",level:4},{value:"Active by Denom queue",id:"active-by-denom-queue",level:4},{value:"Finished queue",id:"finished-queue",level:4},{value:"Module state",id:"module-state",level:4},{value:"Messages",id:"messages",level:2},{value:"Create Gauge",id:"create-gauge",level:3},{value:"Adding balance to Gauge",id:"adding-balance-to-gauge",level:3},{value:"Transactions",id:"transactions",level:2},{value:"create-gauge",id:"create-gauge-1",level:3},{value:"add-to-gauge",id:"add-to-gauge",level:3},{value:"Events",id:"events",level:2},{value:"Handlers",id:"handlers",level:3},{value:"MsgCreateGauge",id:"msgcreategauge",level:4},{value:"MsgAddToGauge",id:"msgaddtogauge",level:4},{value:"EndBlockers",id:"endblockers",level:3},{value:"Incentives distribution",id:"incentives-distribution",level:4},{value:"Hooks",id:"hooks",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Queries",id:"queries",level:2},{value:"active-gauges",id:"active-gauges",level:3},{value:"active-gauges-per-denom",id:"active-gauges-per-denom",level:3},{value:"distributed-coins",id:"distributed-coins",level:3},{value:"gauge-by-id",id:"gauge-by-id",level:3},{value:"gauges",id:"gauges",level:3},{value:"rewards-estimation",id:"rewards-estimation",level:3},{value:"to-distribute-coins",id:"to-distribute-coins",level:3},{value:"upcoming-gauges",id:"upcoming-gauges",level:3}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"incentives"},"Incentives"),(0,r.kt)("h2",{id:"abstract"},"Abstract"),(0,r.kt)("p",null,"Incentives module provides general interface to give yield to stakers."),(0,r.kt)("p",null,"The yield to be given to stakers are stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"gauge")," and it is distributed on epoch basis to the stakers who meet specific conditions."),(0,r.kt)("p",null,"Anyone can create gauge and add rewards to the gauge, there is no way to take it out other than distribution."),(0,r.kt)("p",null,"There are two kinds of ",(0,r.kt)("inlineCode",{parentName:"p"},"gauges"),", perpetual and non-perpetual ones."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Non perpetual ones get removed from active queue after the distribution period finish but perpetual ones persist."),(0,r.kt)("li",{parentName:"ul"},"For non perpetual ones, they distribute the tokens equally per epoch during the ",(0,r.kt)("inlineCode",{parentName:"li"},"gauge")," is in the active period."),(0,r.kt)("li",{parentName:"ul"},"For perpetual ones, it distributes all the tokens at a single time and somewhere else put the tokens regularly to distribute the tokens, it's mainly used to distribute minted OSMO tokens to LP token stakers.")),(0,r.kt)("h2",{id:"contents"},"Contents"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#concepts"},"Concept"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#state"},"State"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#messages"},"Messages"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#events"},"Events"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#hooks"},"Hooks"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#parameters"},"Params"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#transactions"},"Transactions"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#queries"},"Queries")))),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("p",null,"The purpose of ",(0,r.kt)("inlineCode",{parentName:"p"},"incentives")," module is to provide incentives to the users\nwho lock specific token for specific period of time."),(0,r.kt)("p",null,"Locked tokens can be of any denomination, including LP tokens (gamm/pool/x), IBC tokens (tokens sent through IBC such as ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2), and native tokens (such as ATOM or LUNA)."),(0,r.kt)("p",null,"The incentive amount is entered by the gauge creator. Rewards for a given pool of locked up tokens are pooled into a gauge until the disbursement time. At the disbursement time, they are distributed pro-rata (proportionally) to members of the pool."),(0,r.kt)("p",null,"Anyone can create a gauge and add rewards to the gauge. There is no way to withdraw gauge rewards other than distribution. Governance proposals can be raised to match the external incentive tokens with equivalent Osmo incentives (see for example: ",(0,r.kt)("a",{parentName:"p",href:"https://www.mintscan.io/osmosis/proposals/47"},"proposal 47"),")."),(0,r.kt)("p",null,"There are two kinds of gauges: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"perpetual"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"non-perpetual")),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Non-perpetual"))," gauges distribute their tokens equally per epoch while the gauge is in the active period. These gauges get removed from the active queue after the distribution period finishes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Perpetual gauges")),' distribute all their tokens at a single time and only distribute their tokens again once the gauge is refilled (this is mainly used to distribute minted OSMO tokens to LP token stakers). Perpetual gauges persist and will re-disburse tokens when refilled (there is no "active" period)'))),(0,r.kt)("h2",{id:"state"},"State"),(0,r.kt)("h3",{id:"incentives-management"},"Incentives management"),(0,r.kt)("p",null,"All the incentives that are going to be provided are locked into\n",(0,r.kt)("inlineCode",{parentName:"p"},"IncentivePool")," until released to the appropriate recipients after a\nspecific period of time."),(0,r.kt)("h3",{id:"gauge"},"Gauge"),(0,r.kt)("p",null,"Rewards to be distributed are organized by ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauge"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauge"),"\ndescribes how users can get reward, stores the amount of coins in the\ngauge, the cadence at which rewards are to be distributed, and the\nnumber of epochs to distribute the reward over."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"enum LockQueryType {\n  option (gogoproto.goproto_enum_prefix) = false;\n\n  ByDuration = 0; // locks which has more than specific duration\n  ByTime = 1; // locks which are started before specific time\n}\n\nmessage QueryCondition {\n  LockQueryType lock_query_type = 1; // type of lock, ByLockDuration | ByLockTime\n  string denom = 2; // lock denom\n  google.protobuf.Duration duration = 3; // condition for lock duration, only valid if positive\n  google.protobuf.Timestamp timestamp = 4; // condition for lock start time, not valid if unset value\n}\n\nmessage Gauge {\n  uint64 id = 1; // unique ID of a Gauge\n  QueryCondition distribute_to = 2; // distribute condition of a lock which meets one of these conditions\n  repeated cosmos.base.v1beta1.Coin coins = 3; // can distribute multiple coins\n  google.protobuf.Timestamp start_time = 4; // condition for lock start time, not valid if unset value\n  uint64 num_epochs_paid_over = 5; // number of epochs distribution will be done\n}\n")),(0,r.kt)("h3",{id:"gauge-queues"},"Gauge queues"),(0,r.kt)("h4",{id:"upcoming-queue"},"Upcoming queue"),(0,r.kt)("p",null,"To start release ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauges")," at a specific time, we schedule distribution\nstart time with time key queue."),(0,r.kt)("h4",{id:"active-queue"},"Active queue"),(0,r.kt)("p",null,"Active queue has all the ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauges")," that are distributing and after\ndistribution period finish, it's removed from the queue."),(0,r.kt)("h4",{id:"active-by-denom-queue"},"Active by Denom queue"),(0,r.kt)("p",null,"To speed up the distribution process, module introduces the active\n",(0,r.kt)("inlineCode",{parentName:"p"},"Gauges")," by denom."),(0,r.kt)("h4",{id:"finished-queue"},"Finished queue"),(0,r.kt)("p",null,"Finished queue saves the ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauges")," that has finished distribution to keep\nin track."),(0,r.kt)("h4",{id:"module-state"},"Module state"),(0,r.kt)("p",null,"The state of the module is expressed by ",(0,r.kt)("inlineCode",{parentName:"p"},"params"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lockable_durations"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"gauges"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'// GenesisState defines the incentives module\'s genesis state.\nmessage GenesisState {\n  // params defines all the parameters of the module\n  Params params = 1 [ (gogoproto.nullable) = false ];\n  repeated Gauge gauges = 2 [ (gogoproto.nullable) = false ];\n  repeated google.protobuf.Duration lockable_durations = 3 [\n    (gogoproto.nullable) = false,\n    (gogoproto.stdduration) = true,\n    (gogoproto.moretags) = "yaml:\\"lockable_durations\\""\n  ];\n}\n')),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("h3",{id:"create-gauge"},"Create Gauge"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MsgCreateGauge")," can be submitted by any account to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauge"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type MsgCreateGauge struct {\n Owner             sdk.AccAddress\n  DistributeTo      QueryCondition\n  Rewards           sdk.Coins\n  StartTime         time.Time // start time to start distribution\n  NumEpochsPaidOver uint64 // number of epochs distribution will be done\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"State modifications:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Validate ",(0,r.kt)("inlineCode",{parentName:"li"},"Owner")," has enough tokens for rewards"),(0,r.kt)("li",{parentName:"ul"},"Generate new ",(0,r.kt)("inlineCode",{parentName:"li"},"Gauge")," record"),(0,r.kt)("li",{parentName:"ul"},"Save the record inside the keeper's time basis unlock queue"),(0,r.kt)("li",{parentName:"ul"},"Transfer the tokens from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Owner")," to incentives ",(0,r.kt)("inlineCode",{parentName:"li"},"ModuleAccount"),".")),(0,r.kt)("h3",{id:"adding-balance-to-gauge"},"Adding balance to Gauge"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MsgAddToGauge")," can be submitted by any account to add more incentives\nto a ",(0,r.kt)("inlineCode",{parentName:"p"},"Gauge"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type MsgAddToGauge struct {\n GaugeID uint64\n  Rewards sdk.Coins\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"State modifications:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Validate ",(0,r.kt)("inlineCode",{parentName:"li"},"Owner")," has enough tokens for rewards"),(0,r.kt)("li",{parentName:"ul"},"Check if ",(0,r.kt)("inlineCode",{parentName:"li"},"Gauge")," with specified ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.GaugeID")," is available"),(0,r.kt)("li",{parentName:"ul"},"Modify the ",(0,r.kt)("inlineCode",{parentName:"li"},"Gauge")," record by adding ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.Rewards")),(0,r.kt)("li",{parentName:"ul"},"Transfer the tokens from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Owner")," to incentives ",(0,r.kt)("inlineCode",{parentName:"li"},"ModuleAccount"),".")),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("h3",{id:"create-gauge-1"},"create-gauge"),(0,r.kt)("p",null,"Create a gauge to distribute rewards to users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx incentives create-gauge [lockup_denom] [reward] [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1")),(0,r.kt)("p",null,"I want to make incentives for LP tokens of pool 3, namely gamm/pool/3 that have been locked up for at least 14 days. ","[this is currently the only valid bonding period]","\nI want to reward 100 AKT to this pool over 2 days (2 epochs). (50 rewarded on each day)\nI want the rewards to start dispersing on 21 December 2021 (1640081402 UNIX time)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx incentives create-gauge gamm/pool/3 10000ibc/1480B8FD20AD5FCAE81EA87584D269547DD4D436843C1D20F15E00EB64743EF4 \\\n--duration 336h  --start-time 1640081402 --epochs 2 --from WALLET_NAME --chain-id osmosis-1\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2")),(0,r.kt)("p",null,"I want to make incentives for ATOM (ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2) that have been locked up for at least 2 weeks (336h). ","[this is currently the only valid bonding period]","\nI want to reward 1000 JUNO (ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED) to ATOM holders perpetually (perpetually meaning I must add more tokens to this gauge myself every epoch). I want the reward to start dispersing immediately."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx incentives create-gauge ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2 \\\n1000000000ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED --perpetual --duration 336h \\\n--from WALLET_NAME --chain-id osmosis-1\n")),(0,r.kt)("h3",{id:"add-to-gauge"},"add-to-gauge"),(0,r.kt)("p",null,"Add coins to a gauge previously created to distribute more rewards to users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd tx incentives add-to-gauge [gauge_id] [rewards] [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"I want to refill the gauge with 500 JUNO to a previously created gauge (gauge ID 1914) after the distribution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd tx incentives add-to-gauge 1914 500000000ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED \\\n--from WALLET_NAME --chain-id osmosis-1\n")),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"The incentives module emits the following events:"),(0,r.kt)("h3",{id:"handlers"},"Handlers"),(0,r.kt)("h4",{id:"msgcreategauge"},"MsgCreateGauge"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge_id"),(0,r.kt)("td",{parentName:"tr",align:null},"{gaugeID}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"distribute_to"),(0,r.kt)("td",{parentName:"tr",align:null},"{owner}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"rewards"),(0,r.kt)("td",{parentName:"tr",align:null},"{rewards}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"start_time"),(0,r.kt)("td",{parentName:"tr",align:null},"{startTime}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"num_epochs_paid_over"),(0,r.kt)("td",{parentName:"tr",align:null},"{numEpochsPaidOver}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"action"),(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"sender"),(0,r.kt)("td",{parentName:"tr",align:null},"{owner}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"recipient"),(0,r.kt)("td",{parentName:"tr",align:null},"{moduleAccount}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"sender"),(0,r.kt)("td",{parentName:"tr",align:null},"{owner}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"{amount}")))),(0,r.kt)("h4",{id:"msgaddtogauge"},"MsgAddToGauge"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"add_to_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"gauge_id"),(0,r.kt)("td",{parentName:"tr",align:null},"{gaugeID}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge"),(0,r.kt)("td",{parentName:"tr",align:null},"rewards"),(0,r.kt)("td",{parentName:"tr",align:null},"{rewards}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"action"),(0,r.kt)("td",{parentName:"tr",align:null},"create_gauge")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"sender"),(0,r.kt)("td",{parentName:"tr",align:null},"{owner}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"recipient"),(0,r.kt)("td",{parentName:"tr",align:null},"{moduleAccount}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"sender"),(0,r.kt)("td",{parentName:"tr",align:null},"{owner}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer"),(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"{amount}")))),(0,r.kt)("h3",{id:"endblockers"},"EndBlockers"),(0,r.kt)("h4",{id:"incentives-distribution"},"Incentives distribution"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"recipient"),(0,r.kt)("td",{parentName:"tr",align:null},"{receiver}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"sender"),(0,r.kt)("td",{parentName:"tr",align:null},"{moduleAccount}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transfer","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"amount"),(0,r.kt)("td",{parentName:"tr",align:null},"{distrAmount}")))),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("p",null,'In this section we describe the "hooks" that ',(0,r.kt)("inlineCode",{parentName:"p"},"incentives")," module provide\nfor other modules."),(0,r.kt)("p",null,"If there's no usecase for this, we could ignore this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"}," AfterCreateGauge(ctx sdk.Context, gaugeId uint64)\n AfterAddToGauge(ctx sdk.Context, gaugeId uint64)\n AfterStartDistribution(ctx sdk.Context, gaugeId uint64)\n AfterFinishDistribution(ctx sdk.Context, gaugeId uint64)\n AfterDistribute(ctx sdk.Context, gaugeId uint64)\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"The incentives module contains the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DistrEpochIdentifier"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"weekly"')))),(0,r.kt)("p",null,"Note: DistrEpochIdentifier is an epoch identifier, and module distribute\nrewards at the end of epochs. As ",(0,r.kt)("inlineCode",{parentName:"p"},"epochs")," module is handling multiple\nepochs, the identifier is required to check if distribution should be\ndone at ",(0,r.kt)("inlineCode",{parentName:"p"},"AfterEpochEnd")," hook"),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"In this section we describe the queries required on grpc server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Query defines the gRPC querier service.\nservice Query {\n  // returns coins that is going to be distributed\n  rpc ModuleToDistributeCoins(ModuleToDistributeCoinsRequest) returns (ModuleToDistributeCoinsResponse) {}\n  // returns Gauge by id\n  rpc GaugeByID(GaugeByIDRequest) returns (GaugeByIDResponse) {}\n  // returns gauges both upcoming and active\n  rpc Gauges(GaugesRequest) returns (GaugesResponse) {}\n  // returns active gauges\n  rpc ActiveGauges(ActiveGaugesRequest) returns (ActiveGaugesResponse) {}\n  // returns scheduled gauges\n  rpc UpcomingGauges(UpcomingGaugesRequest) returns (UpcomingGaugesResponse) {}\n  // RewardsEst returns an estimate of the rewards at a future specific time.\n  // The querier either provides an address or a set of locks\n  // for which they want to find the associated rewards.\n  rpc RewardsEst(RewardsEstRequest) returns (RewardsEstResponse) {}\n  // returns lockable durations that are valid to give incentives\n  rpc LockableDurations(QueryLockableDurationsRequest) returns (QueryLockableDurationsResponse) {}\n}\n")),(0,r.kt)("h3",{id:"active-gauges"},"active-gauges"),(0,r.kt)("p",null,"Query active gauges"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives active-gauges [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives active-gauges\n")),(0,r.kt)("p",null,"An example output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'- coins: []\n  distribute_to:\n    denom: gamm/pool/99\n    duration: 604800s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "297"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-07-03T12:27:09.323840990Z"\n- coins: []\n  distribute_to:\n    denom: gamm/pool/99\n    duration: 1209600s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "298"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-07-03T12:27:09.323840990Z"\npagination:\n  next_key: BwEAAAAAAAAAHTIwMjEtMDctMDNUMTI6Mjc6MDkuMzIzODQwOTkw\n  total: "0"\n...\n')),(0,r.kt)("h3",{id:"active-gauges-per-denom"},"active-gauges-per-denom"),(0,r.kt)("p",null,"Query active gauges per denom"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives active-gauges-per-denom [denom] [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query all active gauges distributing incentives to holders of gamm/pool/341"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives active-gauges-per-denom gamm/pool/341\n")),(0,r.kt)("p",null,"An example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'- coins: []\n  distribute_to:\n    denom: gamm/pool/341\n    duration: 604800s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "1033"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-09-06T22:42:52.139465318Z"\n- coins: []\n  distribute_to:\n    denom: gamm/pool/341\n    duration: 1209600s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "1034"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-09-06T22:42:52.139465318Z"\npagination:\n  next_key: BwEAAAAAAAAAHTIwMjEtMDctMDNUMTI6Mjc6MDkuMzIzODQwOTkw\n  total: "0"\n...\n')),(0,r.kt)("h3",{id:"distributed-coins"},"distributed-coins"),(0,r.kt)("p",null,"Query coins distributed so far"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives distributed-coins [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives distributed-coins\n")),(0,r.kt)("p",null,"An example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'coins:\n- amount: "27632051924"\n  denom: ibc/0954E1C28EB7AF5B72D24F3BC2B47BBB2FDF91BDDFD57B74B99E133AED40972A\n- amount: "3975960654"\n  denom: ibc/0EF15DF2F02480ADE0BB6E85D9EBB5DAEA2836D3860E9F97F9AADE4F57A31AA0\n- amount: "125999980901"\n  denom: ibc/1480B8FD20AD5FCAE81EA87584D269547DD4D436843C1D20F15E00EB64743EF4\n- amount: "434999992789"\n  denom: ibc/1DC495FCEFDA068A3820F903EDBD78B942FBD204D7E93D3BA2B432E9669D1A59\n- amount: "3001296"\n  denom: ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2\n- amount: "1493887986685"\n  denom: ibc/3BCCC93AD5DF58D11A6F8A05FA8BC801CBA0BA61A981F57E91B8B598BF8061CB\n- amount: "372218215714"\n  denom: ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED\n- amount: "1049999973206"\n  denom: ibc/4E5444C35610CC76FC94E7F7886B93121175C28262DDFDDE6F84E82BF2425452\n- amount: "11666666665116"\n  denom: ibc/7A08C6F11EF0F59EB841B9F788A87EC9F2361C7D9703157EC13D940DC53031FA\n- amount: "13199999715662"\n  denom: ibc/9712DBB13B9631EDFA9BF61B55F1B2D290B2ADB67E3A4EB3A875F3B6081B3B84\n- amount: "1177777428443"\n  denom: ibc/D805F1DA50D31B96E4282C1D4181EDDFB1A44A598BFF5666F4B43E4B8BEA95A5\n- amount: "466666567747"\n  denom: ibc/EA3E1640F9B1532AB129A571203A0B9F789A7F14BB66E350DCBFA18E1A1931F0\n- amount: "79999999178"\n  denom: ibc/F3FF7A84A73B62921538642F9797C423D2B4C4ACB3C7FCFFCE7F12AA69909C4B\n- amount: "65873607694598"\n  denom: uosmo\n')),(0,r.kt)("h3",{id:"gauge-by-id"},"gauge-by-id"),(0,r.kt)("p",null,"Query gauge by id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives gauge-by-id [id] [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query the incentive distribution for gauge ID 1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives gauge-by-id 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'gauge:\n  coins:\n  - amount: "16654747773959"\n    denom: uosmo\n  distribute_to:\n    denom: gamm/pool/1\n    duration: 86400s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins:\n  - amount: "16589795315655"\n    denom: uosmo\n  filled_epochs: "182"\n  id: "1"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-06-19T04:30:19.082462364Z"\n')),(0,r.kt)("h3",{id:"gauges"},"gauges"),(0,r.kt)("p",null,"Query available gauges"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives gauges [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query ALL gauges (by default the limit is 100, so here I will define a much larger number to output all gauges)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives gauges --limit 2000\n")),(0,r.kt)("p",null,"An example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'- coins:\n  - amount: "1924196414964"\n    denom: uosmo\n  distribute_to:\n    denom: gamm/pool/348\n    duration: 604800s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "8"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-10-04T13:59:02.142175968Z"\n- coins:\n  - amount: "641398804181"\n    denom: uosmo\n  distribute_to:\n    denom: gamm/pool/348\n    duration: 1209600s\n    lock_query_type: ByDuration\n    timestamp: "0001-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "9"\n  is_perpetual: true\n  num_epochs_paid_over: "1"\n  start_time: "2021-10-04T13:59:02.142175968Z"\npagination:\n  next_key: null\n  total: "0"\n...\n')),(0,r.kt)("h3",{id:"rewards-estimation"},"rewards-estimation"),(0,r.kt)("p",null,"Query rewards estimation"),(0,r.kt)("p",null,'// Error: strconv.ParseUint: parsing "": invalid syntax'),(0,r.kt)("h3",{id:"to-distribute-coins"},"to-distribute-coins"),(0,r.kt)("p",null,"Query coins that is going to be distributed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives to-distribute-coins [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives to-distribute-coins\n")),(0,r.kt)("p",null,"An example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'coins:\n- amount: "20000000"\n  denom: gamm/pool/87\n- amount: "90791948076"\n  denom: ibc/0954E1C28EB7AF5B72D24F3BC2B47BBB2FDF91BDDFD57B74B99E133AED40972A\n- amount: "10000"\n  denom: ibc/1480B8FD20AD5FCAE81EA87584D269547DD4D436843C1D20F15E00EB64743EF4\n- amount: "1000"\n  denom: ibc/27394FB092D2ECCD56123C74F36E4C1F926001CEADA9CA97EA622B25F41E5EB2\n- amount: "10728832013315"\n  denom: ibc/3BCCC93AD5DF58D11A6F8A05FA8BC801CBA0BA61A981F57E91B8B598BF8061CB\n- amount: "627782783496"\n  denom: ibc/46B44899322F3CD854D2D46DEEF881958467CDD4B3B10086DA49296BBED94BED\n- amount: "450000026794"\n  denom: ibc/4E5444C35610CC76FC94E7F7886B93121175C28262DDFDDE6F84E82BF2425452\n- amount: "38333333334884"\n  denom: ibc/7A08C6F11EF0F59EB841B9F788A87EC9F2361C7D9703157EC13D940DC53031FA\n- amount: "46800000284338"\n  denom: ibc/9712DBB13B9631EDFA9BF61B55F1B2D290B2ADB67E3A4EB3A875F3B6081B3B84\n- amount: "2822222571557"\n  denom: ibc/D805F1DA50D31B96E4282C1D4181EDDFB1A44A598BFF5666F4B43E4B8BEA95A5\n- amount: "2533333432253"\n  denom: ibc/EA3E1640F9B1532AB129A571203A0B9F789A7F14BB66E350DCBFA18E1A1931F0\n- amount: "366164843847"\n  denom: uosmo\n')),(0,r.kt)("h3",{id:"upcoming-gauges"},"upcoming-gauges"),(0,r.kt)("p",null,"Query scheduled gauges (gauges whose ",(0,r.kt)("inlineCode",{parentName:"p"},"start_time")," has not yet occurred)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"osmosisd query incentives upcoming-gauges [flags]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"osmosisd query incentives upcoming-gauges\n")),(0,r.kt)("p",null,"Using this command, we will see the gauge we created earlier, among all other upcoming gauges:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'- coins:\n  - amount: "10000"\n    denom: ibc/1480B8FD20AD5FCAE81EA87584D269547DD4D436843C1D20F15E00EB64743EF4\n  distribute_to:\n    denom: gamm/pool/3\n    duration: 86400s\n    lock_query_type: ByDuration\n    timestamp: "1970-01-01T00:00:00Z"\n  distributed_coins: []\n  filled_epochs: "0"\n  id: "1914"\n  is_perpetual: false\n  num_epochs_paid_over: "2"\n  start_time: "2021-12-21T10:10:02Z"\n...\n')))}p.isMDXComponent=!0}}]);